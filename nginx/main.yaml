---
- name: configure webserver with out and without tls
  hosts: nodes
  gather_facts: true
  become: true
  vars:
    nginx_port_no_tls: 80
    nginx_port_with_tls: 443

    path_to_ssl: /etc/nginx/ssl/
    private_key_dir: private/
    csr_dir: csr/
    cert_dir:  crt/
    sever_hostname: ansible-test  # will be filename prefix

  tasks:
    - name: create nginx repo definition
      copy:
        src: nginx.repo
        dest: /etc/yum.repos.d/nginx.repo
        owner: root
        group: root
        mode: 0644

    - name: install nginx
      yum:
        name: nginx
        update_cache: true
        state: present

    - name: Upgrade pip2 
      pip:
        name: pip ~= 20.1

    - name: Install the required Python library cryptography
      pip:
        name: cryptography >= 1.6

    - name: Create directory for private key file if it doesn't exist
      file:
        path: '{{ path_to_ssl }}{{ private_key_dir }}'
        state: directory
        mode: '0755'

    - name: Create directory for an OpenSSL Certificate Signing Request file if it doesn't exist
      file:
        path: '{{ path_to_ssl }}{{ csr_dir }}'
        state: directory
        mode: '0755'

    - name: Create directory for an OpenSSL certificate if it doesn't exist
      file:
        path: '{{ path_to_ssl }}{{ cert_dir }}'
        state: directory
        mode: '0755'

    - name: Generate an OpenSSL private key with the default values (4096 bits, RSA)
      openssl_privatekey:
        path: '{{ path_to_ssl }}{{ private_key_dir }}{{ sever_hostname }}.pem'
        backup: yes

    - name: Generate an OpenSSL Certificate Signing Request
      openssl_csr:
        path: '{{ path_to_ssl }}{{ csr_dir }}{{ sever_hostname }}.csr'
        privatekey_path: '{{ path_to_ssl }}{{ private_key_dir }}{{ sever_hostname }}.pem'
        common_name: '{{ sever_hostname }}'

    - name: Generate a Self Signed OpenSSL certificate 
      community.crypto.x509_certificate:
        path: '{{ path_to_ssl }}{{ cert_dir }}{{ sever_hostname }}.crt'
        privatekey_path: '{{ path_to_ssl }}{{ private_key_dir }}{{ sever_hostname }}.pem'
        csr_path: '{{ path_to_ssl }}{{ csr_dir }}{{ sever_hostname }}.csr'
        provider: selfsigned

    - name: copy main nginx config file
      copy:
        src: files/nginx.conf
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: copy site's nginx config file
      template:
        src: templates/nginx.conf.j2
        dest: /etc/nginx/conf.d/notls.conf
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: copy index.html
      template:
        src: templates/index.html.j2
        dest: /usr/share/nginx/html/index.html
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: ensure nginx is enabled and started
      service:
        name: nginx
        state: started
        enabled: true

    - name: insert firewalld rule for nginx (port {{ nginx_port_no_tls }}/tcp)
      firewalld:
        port: "{{ nginx_port_no_tls }}/tcp"
        permanent: true
        state: enabled
        immediate: true
      ignore_errors: true

    - name: insert firewalld rule for nginx (port {{ nginx_port_with_tls }}/tcp)
      firewalld:
        port: "{{ nginx_port_with_tls }}/tcp"
        permanent: true
        state: enabled
        immediate: true
      ignore_errors: true

  post_tasks:
    - name: check web site from control server without TLS
      uri:
        url: "http://{{ ansible_host }}:{{ nginx_port_no_tls }}"
        return_content: true
        validate_certs: false
      connection: local
      register: example_webpage_out
      failed_when: example_webpage_out.status != 200

    - name: check web site from control server with TLS
      uri:
        url: "https://{{ ansible_host }}:{{ nginx_port_with_tls }}"
        return_content: true
        validate_certs: false
      connection: local
      register: example_webpage_out
      failed_when: example_webpage_out.status != 200

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted
