---
# tasks file for nginx
- name: Start webserver
  become: true
  block:
    - name: create nginx repo definition
      copy:
        src: nginx.repo
        dest: /etc/yum.repos.d/nginx.repo
        owner: root
        group: root
        mode: 0644

    - name: install nginx
      yum:
        name: nginx
        update_cache: true
        state: present

    - name: Create self-signed certificate
      import_role:
        name: "own_tls"
      tags: 
        - own_tls
 
    - name: copy main nginx config file
      copy:
        src: files/nginx.conf
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: copy site's nginx config file
      template:
        src: templates/nginx.conf.j2
        dest: /etc/nginx/conf.d/tls.conf
        owner: root
        group: root
        mode: 0644
      notify: restart nginx
      tags: reconfig_nginx

    - name: copy index.html
      template:
        src: templates/index.html.j2
        dest: /usr/share/nginx/html/index.html
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: ensure nginx is enabled and started
      service:
        name: nginx
        state: started
        enabled: true

    - name: Populate service facts
      service_facts:
      register: service_facts_list
      tags: check_webserver

    - name: Insert firewalld rules
      block: 
        - name: insert firewalld rule for nginx (port {{ nginx_port_no_tls }}/tcp)
          firewalld:
            port: "{{ nginx_port_no_tls }}/tcp"
            permanent: true
            state: enabled
            immediate: true

        - name: insert firewalld rule for nginx (port {{ nginx_port_with_tls }}/tcp)
          firewalld:
            port: "{{ nginx_port_with_tls }}/tcp"
            permanent: true
            state: enabled
            immediate: true
      when: service_facts_list.ansible_facts.services["firewalld.service"].state == "running"

- name: Check web server
  block:
    - name: check for lack of root privileges in 'Check web server' block
      debug:
        var: ansible_user_id

    - name: check web site from control server without TLS
      uri:
        url: "http://{{ ansible_host }}"
        return_content: true
        validate_certs: false
      connection: local
      register: webpage
      failed_when: webpage.status != 200

    - name: check web site from control server with TLS
      uri:
        url: "https://{{ ansible_host }}"
        return_content: true
        validate_certs: false
      connection: local
      register: webpage
      failed_when: webpage.status != 200
  when: service_facts_list.ansible_facts.services["nginx.service"].state == "running"
  tags: 
    - check_webserver